name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install server dependencies
        run: |
          cd server
          npm ci

      - name: Install client dependencies
        run: |
          cd client
          npm ci

      - name: Run server tests
        run: |
          cd server
          npm test || echo "No server tests found"

      - name: Run client tests
        run: |
          cd client
          npm test -- --watchAll=false || echo "No client tests found"

  push-to-ecr:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Set image tag
        id: vars
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build, tag, and push client image
        env:
          ECR_REGISTRY: 909187290508.dkr.ecr.eu-north-1.amazonaws.com
          ECR_REPOSITORY: mern/client
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd client
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push server image
        env:
          ECR_REGISTRY: 909187290508.dkr.ecr.eu-north-1.amazonaws.com
          ECR_REPOSITORY: mern/server
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd server
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update client task definition image
        run: |
          jq '.containerDefinitions[0].image = "909187290508.dkr.ecr.eu-north-1.amazonaws.com/mern/client:'${{ env.IMAGE_TAG }}'"' .github/workflows/ecs-client-task-def.json > .github/workflows/ecs-client-task-def-patched.json

      - name: Update server task definition image
        run: |
          jq '.containerDefinitions[0].image = "909187290508.dkr.ecr.eu-north-1.amazonaws.com/mern/server:'${{ env.IMAGE_TAG }}'"' .github/workflows/ecs-server-task-def.json > .github/workflows/ecs-server-task-def-patched.json

      - name: Update ECS service (client)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: .github/workflows/ecs-client-task-def-patched.json
          cluster: mern-cluster
          service: mern-client-task-service-36aflrao
          force-new-deployment: true

      - name: Update ECS service (server)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: .github/workflows/ecs-server-task-def-patched.json
          cluster: mern-cluster
          service: mern-server-task-service-kc0cat1e
          force-new-deployment: true

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Add your deployment steps here, e.g., push Docker images, deploy to ECS, S3, etc.
      - name: Deploy placeholder
        run: echo "Add deployment steps for AWS here."
